caughtError = 0
def publishedVersion = "unreleased"

try {

    node {
        environment{

        }
        stage ('Checkout') {
            checkout scm
        }

        stage('create virtualenvironment') {
                sh '''
                       set +e
                       export PATH=/usr/local/bin:$PATH
                       echo ${SHELL}
                       [ -d venv ] && rm -rf venv
                       #virtualenv --python=python2.7 venv
                       virtualenv venv
                       . venv/bin/activate
                       #export PATH=${VIRTUAL_ENV}/bin:${PATH}
                       #pip install --upgrade pip # upgrading to latest version causes this issue - https://stackoverflow.com/questions/45188413/python-pip-install-is-failing-with-attributeerror-module-object-has-no-att
                       pip install -r requirements/base_requirements.txt -r requirements/dev_requirements.txt
                       make clean
                   '''

        }

        withEnv(["VIRTUAL_ENV=$env.WORKSPACE/venv"]){
            stage ('Check_style') {
                 sh """
                    mkdir report
                    #. venv/bin/activate
                    export PATH=${VIRTUAL_ENV}/bin:${PATH}
                    echo $PATH
                    make flake8 | tee report/flake8.log || true
                """
                /*
                sh """
                    #. venv/bin/activate
                    export PATH=${VIRTUAL_ENV}/bin:${PATH}
                    make pylint | tee report/pylint.log || true
                """
                Need static analysis collector plugin

                step([$class: 'WarningsPublisher',
                  parserConfigurations: [[
                    parserName: 'Pep8',
                    pattern: 'report/flake8.log'
                  ]],
                  unstableTotalAll: '0',
                  usePreviousBuildAsReference: true
                ])
                */
            }
        }

        stage('Unittest') {

            try{
            echo 'unittest'
            sh """
                    #. venv/bin/activate
                    export PATH=${VIRTUAL_ENV}/bin:${PATH}
                    make unittest || true
                """
            }
            finally {

                junit allowEmptyResults: true, keepLongStdio: true, testResults: 'report/nosetests.xml'

                publishHTML (target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'coverage',
                        reportFiles: 'index.html',
                        reportName: "Junit Report"
                    ])
            }

            /*
            post {
                always {
                    junit keepLongStdio: true, testResults: 'report/nosetests.xml'
                    publishHTML target: [
                        reportDir: 'cover/',
                        reportFiles: 'index.html',
                        reportName: 'Coverage Report - Unit Test'
                    ]
                }
            }
            */
        }
        stage('Nosetest') {
            echo 'nosetest'
        }
        stage('Coverage') {
            echo 'coverage'
        }
    }
}

catch(caughtError){
    currentBuild.result = "FAILURE"
    echo 'Build failed with Error: ' + caughtError.toString()
    caughtError = caughtError

}
finally{
    node {

        stage("Cleanup Workspace") {
            step([$class: 'WsCleanup'])
        }


        if (caughtError != 0) {
            throw caughtError
        }
    }

}
